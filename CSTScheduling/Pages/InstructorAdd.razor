@page "/InstructorAdd"
@using CSTScheduling.Data.Services
@inject CstScheduleDbService dbService
@inject NavigationManager nv

<div class="col-12">
    <h1><b>Add Instructor</b></h1>
    <hr />

    <EditForm Model="@NewInstructor" OnValidSubmit="@SaveInstructor" OnInvalidSubmit="@HandleInvalidSubmit">

        <DataAnnotationsValidator />

        <div class="col-12 row">
            <label for="insEmail">Email :</label>
            <input type="text" class="form-control" id="insEmail" @bind="NewInstructor.email" />
            <ValidationMessage For="@(() => NewInstructor.email)" />
        </div>
        <div class="col-12 row">
            <label for="insFName">First Name :</label>
            <input type="text" class="form-control" id="insFName" @bind="NewInstructor.fName" />
            <ValidationMessage For="@(() => NewInstructor.fName)" />
        </div>
        <div class="col-12 row">
            <label for="insLName">Last Name :</label>
            <input type="text" class="form-control" id="insLName" @bind="NewInstructor.lName" />
            <ValidationMessage For="@(() => NewInstructor.lName)" />
        </div>
        <div class="col-12 row">
            <label for="insPhoneNum">Phone Number :</label>
            <input type="text" class="form-control" id="insPhoneNum" @bind="NewInstructor.phoneNum" />
            <ValidationMessage For="@(() => NewInstructor.phoneNum)" />
        </div>
        <div class="col-12 row">
            <label for="insOfficeNum">Office Number :</label>
            <input type="text" class="form-control" id="insOfficeNum" @bind="NewInstructor.officeNum" />
            <ValidationMessage For="@(() => NewInstructor.officeNum)" />
        </div>
        <div class="col-12 row">
            <label for="insNote">Note :</label>
            <input type="text" class="form-control" id="insNote" @bind="NewInstructor.note" />
            <ValidationMessage For="@(() => NewInstructor.note)" />
        </div>

        @*<div class="row">
                <div class="col-3">
                    <div class="text-center p-3 mb-3">
                        <button class="btn btn-primary" @onclick="SaveInstructor">Save</button>
                    </div>
                    <div class="text-center p-3 mb-3">
                        <button class="btn btn-primary" @onclick="ClearFields">Clear</button>
                    </div>
                    <div class="text-center p-3 mb-3">
                        <button class="btn btn-primary" @onclick="GoBack">Go Back</button>
                    </div>
                </div>
            </div>*@

        <hr>

        <div class="row">
            <div>
                    <button type="submit" class="btn btn-outline-success" @onclick="@CheckPhone">Save</button>
                    <button type="reset" class="btn btn-outline-warning" @onclick="@ClearFields">Clear</button>
            </div>
        </div>
    </EditForm>
    @if (displayInstructorAddedToDB)
    {
        <div class="row bg-success text-white" style="margin-top:10px; height:40px">
            <label class="p-2">Instructor added to database...</label>
        </div>
    }
    @if (instructorExists)
    {
        <div class="row bg-warning text-white" style="margin-top:10px; height:40px">
            <label class="p-2">Instructor already exists</label>
        </div>
    }
</div>
<br />

@code{

    List<Instructor> Instructors = new List<Instructor>();

    [Parameter]
    public EventCallback<bool> SaveResult { get; set; }

    [Parameter]
    public EventCallback CancelRequest { get; set; }

    [Parameter]
    public Instructor NewInstructor { get; set; } = new Instructor();

    [Parameter]
    public bool Busy { get; set; }

    bool displayInstructorAddedToDB = false;
    bool instructorExists = false;

    private EditContext EditContext;

    private void HandleInvalidSubmit(EditContext context)
    {
        displayInstructorAddedToDB = false;
        instructorExists = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await ReloadInstructors();
        displayInstructorAddedToDB = false;
    }

    private async Task ReloadInstructors()
    {
        Instructors = await dbService.GetInstructorsAsync();
    }

    //not needed anymore
    private void CheckPhone()
    {
        if (NewInstructor != null && NewInstructor.phoneNum != null &&
            NewInstructor.phoneNum.Length == 0)
        {
            NewInstructor.phoneNum = null;
        }
    }

    private async Task SaveInstructor()
    {
        if (NewInstructor.fName != null)
        {
            //only if ins does not exist in list already
            //if (!checkIfInstructorExists())
            //{


            //add to db
            await dbService.AddInstructorAsync(NewInstructor);
            //add to internal list
            Instructors.Add(NewInstructor);
            //clear the fields
            ClearFields();
            //display success message
            displayInstructorAddedToDB = true;


            //}
            //else
            //{
            //    //instructor exists, need to throw an error
            //    instructorExists = true;
            //    displayInstructorAddedToDB = false;
            //}
        }
    }

    private bool checkIfInstructorExists()
    {
        return Instructors.Exists(e => e.fName == NewInstructor.fName);
    }

    private void GoBack()
    {
        nv.NavigateTo("Instructor");
    }

    private void ClearFields()
    {
        NewInstructor = new Instructor();
        displayInstructorAddedToDB = false;
        instructorExists = false;
    }
}